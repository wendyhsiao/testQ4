{"version":3,"sources":["useForm.js","App.js","reportWebVitals.js","index.js"],"names":["useForm","initialValues","validation","onSubmit","useState","values","setValues","errors","setErrors","firstUpdate","useRef","useEffect","current","Object","length","handleChange","e","target","name","checked","value","handleSubmit","App","account","password","rememberMe","console","table","onChange","placeholder","className","type","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+NAiCeA,EA/BC,SAAC,GAA2C,IAA1CC,EAAyC,EAAzCA,cAAeC,EAA0B,EAA1BA,WAAYC,EAAc,EAAdA,SAC3C,EAA4BC,mBAASH,GAArC,mBAAOI,EAAP,KAAeC,EAAf,KASA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KACMC,EAAcC,kBAAO,GAC3BC,qBAAU,WAEJF,EAAYG,QACdH,EAAYG,SAAU,EAIa,IAAjCC,OAAOR,OAAOE,GAAQO,QACxBX,EAASE,KAEV,CAACE,IAMJ,MAAO,CAAEQ,aA1BY,SAAAC,GACG,eAAlBA,EAAEC,OAAOC,KACXZ,GAAU,SAAAD,GAAM,kCAASA,GAAT,kBAAkBW,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,aAE3Db,GAAU,SAAAD,GAAM,kCAASA,GAAT,kBAAkBW,EAAEC,OAAOC,KAAOF,EAAEC,OAAOG,YAsBxCC,aAJF,SAAAL,GACnBR,EAAUN,EAAWG,KAGcA,SAAQE,W,eCChCe,MA5Bf,WAEE,MAAuDtB,EAAQ,CAC7DC,cAAe,CAAEsB,QAAS,GAAIC,SAAU,GAAIC,YAAY,GACxDvB,WAAY,SAACG,GACX,IAAME,EAAS,GAMf,OALKF,EAAOkB,QAEAlB,EAAOmB,WACjBjB,EAAOiB,SAAW,kCAFlBjB,EAAOgB,QAAU,iCAIZhB,GAETJ,SAAU,SAACE,GAAD,OAAYqB,QAAQC,MAAMtB,MAX9BU,EAAR,EAAQA,aAAcM,EAAtB,EAAsBA,aAAchB,EAApC,EAAoCA,OAAQE,EAA5C,EAA4CA,OAc5C,OACE,qCACE,uBAAOW,KAAK,UAAUU,SAAUb,EAAcK,MAAOf,EAAOkB,QAAUM,YAAY,UAAUC,UAAU,SACrGvB,EAAOgB,SAAY,8BAAMhB,EAAOgB,UACjC,uBAAOL,KAAK,WAAWU,SAAUb,EAAcK,MAAOf,EAAOmB,SAAUK,YAAY,WAAWC,UAAU,SACvGvB,EAAOiB,UAAa,8BAAMjB,EAAOiB,WAClC,wBAAOM,UAAU,OAAjB,UAAwB,uBAAOC,KAAK,WAAWb,KAAK,aAAaU,SAAUb,EAAcI,QAASd,EAAOoB,aAAzG,iBACA,wBAAQO,QAASX,EAAcS,UAAU,OAAzC,uBCdSG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f469881a.chunk.js","sourcesContent":["import { useEffect, useRef, useState } from 'react';\n\nconst useForm = ({initialValues, validation, onSubmit}) => {\n  const [values, setValues] = useState(initialValues);\n  const handleChange = e => {\n    if (e.target.name === 'rememberMe') {\n      setValues(values => ({...values, [e.target.name]: e.target.checked}))\n    } else {\n      setValues(values => ({...values, [e.target.name]: e.target.value}))\n    }\n  }\n\n  const [errors, setErrors] = useState({});\n  const firstUpdate = useRef(true)\n  useEffect(() => {\n    // 第一次不執行\n    if (firstUpdate.current) {\n      firstUpdate.current = false\n      return\n    }\n    // 無 error 才提交\n    if (Object.values(errors).length === 0) {\n      onSubmit(values)  \n    }\n  }, [errors])\n\n  const handleSubmit = e => {\n    setErrors(validation(values))\n  }\n\n  return { handleChange, handleSubmit, values, errors }\n}\n\nexport default useForm;","import useForm from './useForm';\nimport './App.css';\n\nfunction App() {\n\n  const { handleChange, handleSubmit, values, errors } = useForm({\n    initialValues: { account: '', password: '', rememberMe: false },\n    validation: (values) => {\n      const errors = {}\n      if (!values.account) {\n        errors.account = '請輸入帳號'\n      } else if (!values.password) {\n        errors.password = '請輸入密碼'\n      }\n      return errors\n    },\n    onSubmit: (values) => console.table(values),\n  })\n\n  return (\n    <>\n      <input name=\"account\" onChange={handleChange} value={values.account}  placeholder=\"Account\" className=\"item\"/>\n      {errors.account && (<div>{errors.account}</div>)}\n      <input name=\"password\" onChange={handleChange} value={values.password} placeholder=\"password\" className=\"item\"/>\n      {errors.password && (<div>{errors.password}</div>)}\n      <label className=\"item\"><input type=\"checkbox\" name=\"rememberMe\" onChange={handleChange} checked={values.rememberMe} />Remember Me</label>\n      <button onClick={handleSubmit} className=\"item\">Login</button>\n    </>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}